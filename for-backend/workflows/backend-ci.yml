name: Backend CI/CD
run-name: ${{ github.actor }} - ${{ github.ref_name }} - [${{ github.sha }}]

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  OS: ubuntu-latest
  IMAGE_REPO: 'test-backend'
  IMAGE_TAG: ${{ github.sha }}
  HELM_RELEASE_NAME: backend
  HELM_NAMESPACE: default

jobs:
  test-code:
    name: Test Code
    # Simulate the utittests (because they are not there)
    runs-on: ${{ .env.OS }}
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test tools
        run: pip install flake8 bandit

      - name: Run flake8 (style checks)
        run: flake8 .

      - name: Run bandit (security checks)
        run: bandit -r .

  build-and-push:
    name: Build and Push Docker Image
    needs: test-code
    runs-on: ${{ .env.OS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ .env.IMAGE_REPO }}:${{ .env.IMAGE_TAG }} .

      - name: Push image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ .env.IMAGE_REPO }}:${{ .env.IMAGE_TAG }}

  call-backend-cd:
    name: Call centralized deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Trigger centralized deploy
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.INFRASTRUCTURE_REPO_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/fredisson11/tp154-infrastructure/actions/workflows/backend-cd-main.yml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "IMAGE_REPO": "${{ env.IMAGE_REPO }}",
                "IMAGE_TAG": "${{ env.IMAGE_TAG }}",
                "HELM_RELEASE_NAME": "${{ env.HELM_RELEASE_NAME }}",
                "HELM_NAMESPACE": "${{ env.HELM_NAMESPACE }}",
                "OS": "${{ env.OS }}"
              }
            }'
